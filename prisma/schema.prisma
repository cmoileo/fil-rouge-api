// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Agency {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  house_number    Int
  street          String
  zip_code        Int
  city            String
  country         String
  employee_count  Int
  plan            Plan
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  jobs_users      JobsUsers[]
  users           User[]
  folders         Folder[]
  tasks           Task[]
  jobs            Job[]
  task_categories TaskCategory[]
  comments        Comment[]
  pictures        Picture[]
  role            Role?
  PendingEmployee PendingEmployee[]
  TaskState       TaskState[]
}

model PendingEmployee {
  id        String    @id @default(uuid())
  email     String    @unique
  agency_id String
  Agency    Agency    @relation(fields: [agency_id], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  firstname       String
  lastname        String
  password        String
  agency_id       String
  agency          Agency            @relation(fields: [agency_id], references: [id])
  jobs_users      JobsUsers[]
  created_tasks   Task[]
  assigned_tasks  AssignedTask[]
  Comment         Comment[]
  Picture         Picture[]
  FavoriteProject FavoriteProject[]
  role            Role?
}

model AssignedTask {
  id         String    @id @default(uuid())
  task_id    String
  employe_id String
  task       Task      @relation(fields: [task_id], references: [id])
  employe    User      @relation(fields: [employe_id], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Folder {
  id               String    @id @default(uuid())
  name             String
  agency_id        String
  parent_folder_id String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  agency           Agency    @relation(fields: [agency_id], references: [id])
  parent           Folder?   @relation("FolderToFolder", fields: [parent_folder_id], references: [id])
  folders          Folder[]  @relation("FolderToFolder")
  projects         Project[]
}

model Project {
  id              String            @id @default(uuid())
  name            String
  description     String?
  folder_id       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  folder          Folder?           @relation(fields: [folder_id], references: [id])
  tasks           Task[]
  kanban_states   KanbanState[]
  FavoriteProject FavoriteProject[]
}

model Task {
  id                  String         @id @default(uuid())
  name                String
  description         String?
  progress_percentage Int            @default(0)
  finishing_date      DateTime?
  starting_date       DateTime?
  is_priority         Priority?
  project_id          String?
  kanban_state_id     Int?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  project             Project?       @relation(fields: [project_id], references: [id])
  kanban_state        KanbanState?   @relation(fields: [kanban_state_id], references: [id])
  task_users          AssignedTask[]
  task_categories     TaskCategory[]
  comments            Comment[]
  pictures            Picture[]
  Agency              Agency         @relation(fields: [agencyId], references: [id])
  agencyId            String
  User                User           @relation(fields: [userId], references: [id])
  userId              String
  task_state_id       String?
  TaskState           TaskState?     @relation(fields: [task_state_id], references: [id])
}

model TaskState {
  id        String    @id @default(uuid())
  state     String
  order     Int
  agency_id String
  Agency    Agency    @relation(fields: [agency_id], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Task      Task[]
}

model Job {
  id         String      @id @default(uuid())
  name       String
  color      String
  agency_id  String
  jobs_users JobsUsers[]
  agency     Agency      @relation(fields: [agency_id], references: [id])
}

model JobsUsers {
  id       String  @id @default(uuid())
  user_id  String
  job_id   String
  user     User    @relation(fields: [user_id], references: [id])
  job      Job     @relation(fields: [job_id], references: [id])
  Agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId String?
}

model TaskCategory {
  id        Int       @id @default(autoincrement())
  name      String
  color     String
  agency_id String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  agency    Agency    @relation(fields: [agency_id], references: [id])
  tasks     Task[]
}

model Comment {
  id        String    @id @default(uuid())
  author_id String
  task_id   String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  author    User      @relation(fields: [author_id], references: [id])
  task      Task      @relation(fields: [task_id], references: [id])
  Agency    Agency?   @relation(fields: [agencyId], references: [id])
  agencyId  String?
  Picture   Picture[]
}

model Picture {
  id         Int       @id @default(autoincrement())
  pathname   String
  user_id    String
  comment_id String
  task_id    String
  agency_id  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  user       User      @relation(fields: [user_id], references: [id])
  comment    Comment   @relation(fields: [comment_id], references: [id])
  task       Task      @relation(fields: [task_id], references: [id])
  agency     Agency    @relation(fields: [agency_id], references: [id])
}

model FavoriteProject {
  id         Int     @id @default(autoincrement())
  user_id    String
  project_id String
  order      Int
  user       User    @relation(fields: [user_id], references: [id])
  project    Project @relation(fields: [project_id], references: [id])
}

model KanbanState {
  id            Int                @id @default(autoincrement())
  state         String
  order         Int
  project_id    String
  initial_state InitialKanbanState
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
  project       Project            @relation(fields: [project_id], references: [id])
  Task          Task[]
}

enum Plan {
  freemium
  pro
  business
}

enum Priority {
  low
  medium
  hard
}

enum InitialKanbanState {
  to_do
  in_progress
  needs_review
  done
}

enum Role {
  owner
  admin
  user
}
